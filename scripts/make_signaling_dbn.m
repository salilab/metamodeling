% Make a DBN for the exocytosis model with the following variables
%
% Time-dependent variables
%
% Reference variables
% Gex.ref, Gin.ref, Scell.ref
%
% Observed variables
%
% Time-invariant variables
%
% Parameters
%
% To generate a conditional gaussian model
%
% All variables display gaussian distributions.

% To generate a conditional gaussian model
function [dbn_factory]= make_signaling_dbn(Gin_mean_signaling, ATP_mean_signaling, GLP1_mean_signaling,...
                                           GLP1R_mean_signaling, cAMP_mean_signaling, Ca_mean_signaling,...
                                           S_mean_signaling, ...
                                           Gin_cov_signaling, ATP_cov_signaling, GLP1_cov_signaling, ...
                                           GLP1R_cov_signaling, cAMP_cov_signaling, Ca_cov_signaling, ...
                                           S_cov_signaling, min_cov_signaling,...
                                           Gin_w_ATP_signaling, ATP_w_ATP_signaling, GLP1_w_GLP1R_signaling,...
                                           ATP_w_cAMP_signaling, GLP1R_w_cAMP_signaling, cAMP_w_cAMP_signaling,...
                                           cAMP_w_Ca_signaling, Ca_w_Ca_signaling, Ca_w_S_signaling);
    
    node_names=  {'Gin.signaling','Gin.ref','ATP.signaling','GLP1.signaling','GLP1.ref',...
                  'GLP1.obs','GLP1R.signaling','GLP1R.ref','cAMP.signaling','Ca.signaling',...
                  'S.signaling','Scell.ref'}; 
    n= length(node_names);
    
    % Intra - in one time slice
    edges_intra= {'Gin.ref','Gin.signaling';'GLP1.signaling','GLP1.ref';'GLP1.ref','GLP1.obs';...
                  'GLP1R.ref','GLP1R.signaling';'S.signaling','Scell.ref'};
    
    % Inter - between time slices
    edges_inter= {'Gin.signaling', 'Gin.signaling'; 'Gin.signaling','ATP.signaling';'ATP.signaling','ATP.signaling';...
                  'ATP.signaling','cAMP.signaling';'GLP1.signaling','GLP1.signaling';'GLP1.signaling','GLP1R.signaling';...
                  'GLP1R.signaling', 'GLP1R.signaling';'GLP1R.signaling','cAMP.signaling';'cAMP.signaling', 'cAMP.signaling';...
                  'cAMP.signaling', 'Ca.signaling';'Ca.signaling','Ca.signaling'; 'Ca.signaling','S.signaling';'S.signaling','S.signaling'}; 
    
    % 'Equivalence classes' specify how the template is initiated and rolled
    % Specify which CPD is associates with each node in either time
    % slice 1 (eclass1) or in slice 2 onwards (eclass2)
    eclass1_map= containers.Map();
    eclass2_map= containers.Map();
    for i=1:numel(node_names)
        node_name= node_names{i};
        cpd_name= [ node_name '.intra' ];
        eclass1_map(node_name) = cpd_name;
        eclass2_map(node_name) = cpd_name;
    end
    eclass2_map('Gin.signaling')= 'Gin.signaling.inter';
    eclass2_map('ATP.signaling')= 'ATP.signaling.inter';
    eclass2_map('GLP1.signaling')= 'GLP1.signaling.inter';   
    eclass2_map('GLP1R.signaling')= 'GLP1R.signaling.inter';   
    eclass2_map('cAMP.signaling')= 'cAMP.signaling.inter';   
    eclass2_map('Ca.signaling')= 'Ca.signaling.inter';    
    eclass2_map('S.signaling')= 'S.signaling.inter';   
    
    % elcass1 (time-slice 0 or all parents are in the same time slice)
    CPDFactories= {};
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'Gin.ref', 0, ...
        {'mean', Gin_mean_signaling, 'cov', Gin_cov_signaling} ); % Gin.ref = 1.0 * Gin
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'Gin.signaling', 0, ...
        {'mean', 0.0, 'cov', Gin_cov_signaling*min_cov_signaling,   'weights', 1.0} ); % Gin
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'ATP.signaling', 0, ...
        {'mean', ATP_mean_signaling, 'cov', ATP_cov_signaling}); % ATP
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1.signaling', 0, ...
        {'mean', GLP1_mean_signaling, 'cov', GLP1_cov_signaling}); % GLP1
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1.ref', 0, ...
        {'mean', 0, 'cov', GLP1_cov_signaling*min_cov_signaling,   'weights', 1.0}); % GLP1
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1.obs', 0, ...
        {'mean', 0, 'cov', GLP1_cov_signaling*min_cov_signaling,   'weights', 1.0}); % GLP1
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1R.ref', 0, ...
        {'mean', GLP1R_mean_signaling, 'cov', GLP1R_cov_signaling}); % GLP1R.ref
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1R.signaling', 0, ...
        {'mean', GLP1R_mean_signaling, 'cov', GLP1R_cov_signaling, 'weights', 0.0}); % GLP1R = GLP1R_w_GLP1R_signaling * GLP1R.ref
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'cAMP.signaling', 0, ...
        {'mean', cAMP_mean_signaling, 'cov', cAMP_cov_signaling}); % cAMP
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'Ca.signaling', 0, ...
        {'mean', Ca_mean_signaling, 'cov', Ca_cov_signaling}); % Ca2+
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'S.signaling', 0, ...
        {'mean', S_mean_signaling, 'cov', S_cov_signaling}); % S
    
    CPDFactories{end+1} = ...
        CPDFactory('Gaussian_CPD', 'Scell.ref', 0, ...
        { 'mean', 0.0,   'cov', S_cov_signaling*min_cov_signaling,   'weights', 1.0} ); % Scell.ref = 1.0 * I

    % eclass2 (time-slice t+1 with parents in the previous time slice)
    % CPD for G(t+1)
    weights_Gin1_T0= containers.Map(); % parents in slice t
    weights_Gin1_T1= containers.Map(); % parents in slice t+1
    weights_Gin1_T0('Gin.signaling')= 0.0;
    weights_Gin1_T1('Gin.ref')= 1.0;
    CPDFactories{end+1} = ...
       CPDFactory('Gaussian_CPD', 'Gin.signaling', 1, ...
        {'mean', 0.0, 'cov', Gin_cov_signaling*min_cov_signaling}, weights_Gin1_T0, weights_Gin1_T1);  % Gin(t+1) = 1.0 * Gin.ref(t+1)

    weights_ATP1_T0= containers.Map(); 
    weights_ATP1_T1= containers.Map(); 
    weights_ATP1_T0('Gin.signaling')= Gin_w_ATP_signaling;
    weights_ATP1_T0('ATP.signaling')= ATP_w_ATP_signaling;
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'ATP.signaling', 1, ...
        {'mean', 0.0, 'cov', ATP_cov_signaling*min_cov_signaling}, weights_ATP1_T0, weights_ATP1_T1);  % ATP(t+1) = ATP_w_ATP_signaling * ATP(t) + Gin_w_ATP_signaling * Gin (t)
    
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1.signaling', 1, ...
        {'mean', 0.0, 'cov', GLP1_cov_signaling*min_cov_signaling, 'weights', 1.0}); % GLP1(t+1) = 1.0 * GLP1(t)
    
    weights_GLP1R1_T0= containers.Map();
    weights_GLP1R1_T1= containers.Map(); 
    weights_GLP1R1_T0('GLP1.signaling')= GLP1_w_GLP1R_signaling;
    weights_GLP1R1_T0('GLP1R.signaling')= 0.0;
    weights_GLP1R1_T1('GLP1R.ref')= 0.0;
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'GLP1R.signaling', 1, ...
        {'mean', 0.0, 'cov', GLP1R_cov_signaling*min_cov_signaling}, weights_GLP1R1_T0, weights_GLP1R1_T1); % GLP1R(t+1) = 0.0 * GLP1R(t) + 0.0 * GLP1R.ref(t) + GLP1_w_GLP1R_signaling * GLP1(t)
    
    weights_cAMP1_T0= containers.Map(); 
    weights_cAMP1_T1= containers.Map(); 
    weights_cAMP1_T0('ATP.signaling')= ATP_w_cAMP_signaling;
    weights_cAMP1_T0('GLP1R.signaling')= GLP1R_w_cAMP_signaling;
    weights_cAMP1_T0('cAMP.signaling')= cAMP_w_cAMP_signaling;
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'cAMP.signaling', 1, ...
        {'mean', 0.0, 'cov', cAMP_cov_signaling*min_cov_signaling}, weights_cAMP1_T0, weights_cAMP1_T1);  % cAMP(t+1) = cAMP_w_cAMP_signaling* cAMP(t) + GLP1R_w_cAMP_signaling*GLP1R(t) + ATP_w_cAMP_signaling* ATP(t)
    
    weights_Ca1_T0= containers.Map(); 
    weights_Ca1_T1= containers.Map(); 
    weights_Ca1_T0('cAMP.signaling')= cAMP_w_Ca_signaling;
    weights_Ca1_T0('Ca.signaling')= Ca_w_Ca_signaling;
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'Ca.signaling', 1, ...
        {'mean', 0.0, 'cov', Ca_cov_signaling*min_cov_signaling}, weights_Ca1_T0, weights_Ca1_T1); % Ca(t+1) = Ca_w_Ca_signaling * Ca(t) + cAMP_w_Ca_signaling * cAMP(t)

    weights_S1_T0= containers.Map(); 
    weights_S1_T1= containers.Map(); 
    weights_S1_T0('Ca.signaling')= Ca_w_S_signaling;
    weights_S1_T0('S.signaling')= 0.0;
    CPDFactories{end+1}=  ...
        CPDFactory('Gaussian_CPD', 'S.signaling', 1, ...
        {'mean', 0.0, 'cov', S_cov_signaling*min_cov_signaling}, weights_S1_T0, weights_S1_T1); % S(t+1) = 0.0 * S(t) + Ca_w_S_signaling * Ca(t) 

    % Final DBN factory
    dbn_factory= DBNFactory( ...
        node_names, edges_intra, edges_inter, ...
        eclass1_map, eclass2_map, CPDFactories);
  end

